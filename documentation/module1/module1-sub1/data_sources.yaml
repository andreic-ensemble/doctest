openapi: 3.0.3
info:
  title: Data Sources
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /data_sources:
    parameters:
      - $ref: '#/components/parameters/activeOnly'
      - $ref: '#/components/parameters/dataSources'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/searchFilter'
      - $ref: '#/components/parameters/sortBy'
      - $ref: '#/components/parameters/sortOrder'
    get:
      summary: Get a list of data sources
      security:
        - bearer_auth: []
      responses:
        '200':
          description: Data Sources Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/genericDataSource'
              example:
                $ref: '#/components/examples/dataSourceList/value'
        '404':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_error_ClientError'
      operationId: get-data-sources
      description: Retrieve the list of data sources for the data catalog.
  '/data_source/{name}':
    get:
      parameters:
        - $ref: '#/components/parameters/name'
      security:
        - bearer_auth: []
      summary: Get data source by name
      responses:
        '200':
          description: Data Source Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericDataSource'
        '404':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_error_ClientError'
      operationId: get--data-source
      description: Get a single data source by name
    post:
      description: Create new data source
      operationId: create-data-source
      summary: Create a data source
      security:
        - bearer_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genericDataSource'
      responses:
        '201':
          description: Data Source Created
        '400':
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_error_ClientError'
      parameters:
        - $ref: '#/components/parameters/name'
    put:
      summary: Update a data source.
      description: Update a data source specified by name with the passed data source info.
      operationId: update-data-source
      security:
        - bearer_auth: []
      parameters:
        - $ref: '#/components/parameters/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genericDataSource'
      responses:
        '200':
          description: Data source updated successfully.
        '400':
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_error_ClientError'
        '404':
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_error_ClientError'
    delete:
      description: Delete the specified data source
      operationId: delete-data-source
      security:
        - bearer_auth: []
      summary: Delete a data source
      responses:
        '200':
          description: OK
      parameters:
        - $ref: '#/components/parameters/name'
  '/data_sources/{name}/test_connection':
    parameters:
      - $ref: '#/components/parameters/name'
    get:
      summary: Test connection to data source
      security:
        - bearer_auth: []
      responses:
        '200':
          description: Data source connection successful
        '404':
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_error_ClientError'
      operationId: get-data_sources-name-test_connection
      description: Test the connection to a specified data source.
  /data_sources/import:
    post:
      summary: Import a data source
      security:
        - bearer_auth: []
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: The local file uploaded by the user.
      responses:
        '201':
          description: Data source imported
        '400':
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_error_ClientError'
      operationId: import-data-source
      description: Create a data source from an uploaded file.
  /data_sources/export:
    get:
      summary: Export data source(s)
      security:
        - bearer_auth: []
      parameters:
        - $ref: '#/components/parameters/dataSourcesExport'
      responses:
        '200':
          description: Data source exported into file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_error_ClientError'
      operationId: export-data-source
      description: Export data source(s) to a file.
components:
  schemas:
    genericDataSource:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ldapDataSource'
        - $ref: '#/components/schemas/databaseDataSource'
        - $ref: '#/components/schemas/customDataSource'
      discriminator:
        propertyName: type
        mapping:
          ldap: '#/components/schemas/ldapDataSource'
          database: '#/components/schemas/databaseDataSource'
          custom: '#/components/schemas/customDataSource'
    dataSource:
      description: This is the parent schema for all datasource types.
      type: object
      properties:
        name:
          type: string
          description: The given name of the data source
        category:
          type: string
          enum:
            - ldap
            - database
            - custom
          description: The major category of data source
        type:
          type: string
          example: active_directory
        createdOn:
          type: string
          format: date-time
          example: '2021-01-30T08:30:00Z'
        isReadOnly:
          type: boolean
          example: false
        description:
          type: string
        defaultSchema:
          $ref: '#/components/schemas/schemaMapping'
        status:
          type: string
          example: OK
        addedSchemas:
          type: array
          items:
            $ref: '#/components/schemas/schemaMapping'
      required:
        - name
        - type
    schemaMapping:
      type: object
      properties:
        name:
          type: string
          example: defaultSchema
        url:
          type: string
          example: 'http://localhost:3000/schema/defaultSchema'
      required:
        - name
        - url
    ldapDataSource:
      description: LDAP data source
      allOf:
        - $ref: '#/components/schemas/dataSource'
        - type: object
          properties:
            host:
              type: string
              example: someHostName
            port:
              type: string
              example: '2389'
            isSsl:
              type: boolean
              example: false
            bindDn:
              type: string
              example: cn=Directory Manager
            password:
              type: string
              example: password123
            baseDn:
              type: string
              example: cn=config
            isPagedResultsControl:
              type: boolean
              example: true
            pageSize:
              type: number
              example: 100
            isChaseReferrals:
              type: boolean
              example: false
            failovers:
              type: array
              example:
                - host: 10.11.12.123
                  port: 3000
                  isSsl: false
                - host: 10.11.12.789
                  port: 7070
                  isSsl: true
            verifySslHostname:
              type: boolean
              example: true
            kerberosProfile:
              type: string
              example: vds_krb5
              nullable: true
          required:
            - isSsl
            - password
            - host
            - port
    databaseDataSource:
      allOf:
        - $ref: '#/components/schemas/dataSource'
        - type: object
          properties:
            driverClassName:
              type: string
              example: org.apache.derby.jdbc.ClientDriver
            url:
              type: string
              example: 'jdbc:derby://hostname:1527/AdvWorks'
            username:
              type: string
              example: appUser
            password:
              type: string
              example: password123
            databaseTypeName:
              type: string
              example: Apache Derby
            failOverName:
              type: string
              example: log2db
          required:
            - driverClassName
            - url
            - username
            - password
            - databaseTypeName
    customDataSource:
      allOf:
        - $ref: '#/components/schemas/dataSource'
        - type: object
          properties:
            className:
              type: string
              example: com.rli.scripts.customobjects.acsclient
            pubAppClassName:
              type: string
              example: acsclient
            subAppClassName:
              type: string
            customProps:
              type: array
              items:
                type: object
                additionalProperties:
                  type: string
                example:
                  url: 'http://fakeurl.com'
                  fakeProp: fakePropVal
              description: 'List<HashMap<String, String>> containing the custom properties.'
          required:
            - className
    Client_error_ClientError:
      description: Generic error response object.
      type: object
      properties:
        status:
          description: HTTP status code of the response.
          example: 400
          type: integer
          format: int32
          nullable: false
        code:
          description: RLI-specific error code
          type: string
          enum:
            - created
            - accepted
            - no_content
            - redirect
            - not_modified
            - bad_request
            - unauthorized
            - forbidden
            - not_found
            - method_not_allowed
            - conflict
            - precondition_failed
            - too_many_requests
            - internal_server_error
            - unavailable
            - item_name_invalid
            - insufficient_scope
        message:
          description: A short message describing the error.
          example: Method Not Allowed
          type: string
          nullable: false
  examples:
    dataSourceList:
      value:
        - name: company directory
          category: ldap
          type: active_directory
          description: The data source for an entire company directory
          host: fakehost.fakeorg
          port: '2899'
          isSsl: false
          password: fakePass
          status: OK
          createdOn: '2022-05-25T08:30:00Z'
          isReadOnly: false
          defaultSchema:
            name: generatedSchemaForCompanyDirectory
            url: 'http://localhost:3000/schema/generatedSchemaForCompanyDirectory'
          addedSchemas:
            - name: userCreatedSchema1
              url: 'http://localhost:3000/schema/userCreatedSchema1'
            - name: userCreatedSchema2
              url: 'http://localhost:3000/schema/userCreatedSchema2'
        - name: Derby
          category: database
          type: example_directory
          description: A Derby data source
          driverClassName: org.apache.derby.jdbc.ClientDriver
          url: 'jdbc:derby://hostname:1527/AdvWorks'
          username: admin
          password: adminPass
          databaseTypeName: Apache Derby
          status: OK
          createdOn: '2022-07-12T10:12:00Z'
          isReadOnly: false
          defaultSchema:
            name: generatedSchemaForDerby
            url: 'http://localhost:3000/schema/generatedSchemaForDerby'
          addedSchemas:
            - name: userCreatedSchema3
              url: 'http://localhost:3000/schema/userCreatedSchema3'
            - name: userCreatedSchema4
              url: 'http://localhost:3000/schema/userCreatedSchema4'
        - type: oracle_db
          name: Custom Users
          category: custom
          description: Custom user data
          className: com.rli.scripts.customobjects.acsclient
          status: OK
          createdOn: '2022-09-12T10:12:00Z'
          isReadOnly: false
          defaultSchema:
            name: generatedSchemaForActiveDirectory
            url: 'http://localhost:3000/schema/generatedSchemaForActiveDirectory'
        - type: scim_db
          name: SCIM Users
          category: custom
          description: SCIM user data
          className: com.rli.scim.users
          status: OK
          createdOn: '2022-09-10T10:12:00Z'
          isReadOnly: true
          defaultSchema:
            name: generatedSchemaForSCIM
            url: 'http://localhost:3000/schema/generatedSchemaForSCIM'
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
  parameters:
    url:
      name: url
      in: path
      required: true
      description: name string
      schema:
        type: string
    name:
      name: name
      in: path
      required: true
      description: data source name as a string
      schema:
        type: string
    path:
      name: path
      in: path
      required: true
      description: JSON string representation of the path array for a node
      schema:
        type: string
    searchFilter:
      name: searchFilter
      in: query
      required: false
      description: String to filter results based on name and data sources
      schema:
        type: string
    activeOnly:
      name: activeOnly
      in: query
      required: false
      description: 'If true/present, only show active views; else, show all'
      schema:
        type: boolean
    dataSources:
      name: dataSources
      in: query
      required: false
      description: List of data sources to filter results
      schema:
        type: array
        items:
          type: string
    dataSourcesExport:
      name: dataSources
      in: query
      required: true
      description: List of data sources to export
      schema:
        type: array
        items:
          type: string
    sortBy:
      name: sortBy
      in: query
      required: false
      description: Field to sort results by
      schema:
        type: string
        enum:
          - NAME
          - LAST_MODIFIED
    sortOrder:
      name: sortOrder
      in: query
      required: false
      description: Sort in ascending or descending order
      schema:
        type: string
        enum:
          - ASC
          - DES
    typeName:
      name: typeName
      in: path
      required: true
      schema:
        type: string
    Limit:
      name: limit
      description: The maximum number of items to return per page.
      in: query
      required: false
      example: 1000
      schema:
        type: integer
        format: int64
        maximum: 1000
    Offset:
      name: offset
      description: The offset of the item at which to begin the response.
      in: query
      required: false
      example: 1000
      schema:
        type: integer
        format: int64
        default: 0
